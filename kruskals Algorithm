#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int find(int parent[], int i) {
	if (parent[i] != i)
		parent[i] = find(parent, parent[i]);
	return parent[i];
}

void union1(int parent[], int rank[], int i, int j) {
	int rootI = find(parent, i);
	int rootJ = find(parent, j);

	if (rank[rootI] < rank[rootJ]) {
		parent[rootI] = rootJ;
	} else if (rank[rootI] > rank[rootJ]) {
		parent[rootJ] = rootI;
	} else {
		parent[rootJ] = rootI;
		rank[rootI]++;
	}
}

void kruskalMST(int **cost, int V) {
	int *parent = (int *)malloc(V * sizeof(int));
	int *rank = (int *)malloc(V * sizeof(int));

	for (int i = 0; i < V; i++) {
		parent[i] = i;
		rank[i] = 0;
	}

	int edges = 0, totalCost = 0;

	while (edges < V - 1) {
		int min = INT_MAX, a = -1, b = -1;
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (i != j && cost[i][j] < min && find(parent, i) != find(parent, j)) {
					min = cost[i][j];
					a = i;
					b = j;
				}
			}
		}

		if (a != -1 && b != -1) {
			union1(parent, rank, a, b);
			printf("Edge %d:(%d, %d) cost:%d\n", edges, a, b, min);
			totalCost += min;
			edges++;
		}
	}

	printf("Minimum cost= %d\n", totalCost);

	free(parent);
	free(rank);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
